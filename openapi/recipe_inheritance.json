{
  "openapi": "3.0.2",
  "servers": [],
  "info": {
    "description": "Documentation for Queenbee recipe schema.",
    "version": "1.6.6",
    "title": "Queenbee Recipe Schema",
    "contact": {
      "name": "Ladybug Tools",
      "email": "info@ladybug.tools",
      "url": "https://github.com/ladybug-tools/queenbee"
    },
    "x-logo": {
      "url": "https://www.ladybug.tools/assets/img/honeybee.png",
      "altText": "Queenbee logo"
    },
    "license": {
      "name": "MIT",
      "url": "https://github.com/ladybug-tools/queenbee-schema/blob/master/LICENSE"
    }
  },
  "externalDocs": {
    "description": "OpenAPI Specification with Inheritance",
    "url": "./recipe_inheritance.json"
  },
  "tags": [
    {
      "name": "dag_model",
      "x-displayName": "DAG",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DAG\" />\n"
    },
    {
      "name": "dagarrayinput_model",
      "x-displayName": "DAGArrayInput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DAGArrayInput\" />\n"
    },
    {
      "name": "dagarrayoutput_model",
      "x-displayName": "DAGArrayOutput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DAGArrayOutput\" />\n"
    },
    {
      "name": "dagbooleaninput_model",
      "x-displayName": "DAGBooleanInput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DAGBooleanInput\" />\n"
    },
    {
      "name": "dagbooleanoutput_model",
      "x-displayName": "DAGBooleanOutput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DAGBooleanOutput\" />\n"
    },
    {
      "name": "dagfileinput_model",
      "x-displayName": "DAGFileInput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DAGFileInput\" />\n"
    },
    {
      "name": "dagfileoutput_model",
      "x-displayName": "DAGFileOutput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DAGFileOutput\" />\n"
    },
    {
      "name": "dagfolderinput_model",
      "x-displayName": "DAGFolderInput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DAGFolderInput\" />\n"
    },
    {
      "name": "dagfolderoutput_model",
      "x-displayName": "DAGFolderOutput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DAGFolderOutput\" />\n"
    },
    {
      "name": "dagintegerinput_model",
      "x-displayName": "DAGIntegerInput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DAGIntegerInput\" />\n"
    },
    {
      "name": "dagintegeroutput_model",
      "x-displayName": "DAGIntegerOutput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DAGIntegerOutput\" />\n"
    },
    {
      "name": "dagnumberinput_model",
      "x-displayName": "DAGNumberInput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DAGNumberInput\" />\n"
    },
    {
      "name": "dagnumberoutput_model",
      "x-displayName": "DAGNumberOutput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DAGNumberOutput\" />\n"
    },
    {
      "name": "dagobjectinput_model",
      "x-displayName": "DAGObjectInput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DAGObjectInput\" />\n"
    },
    {
      "name": "dagobjectoutput_model",
      "x-displayName": "DAGObjectOutput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DAGObjectOutput\" />\n"
    },
    {
      "name": "dagpathinput_model",
      "x-displayName": "DAGPathInput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DAGPathInput\" />\n"
    },
    {
      "name": "dagpathoutput_model",
      "x-displayName": "DAGPathOutput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DAGPathOutput\" />\n"
    },
    {
      "name": "dagstringinput_model",
      "x-displayName": "DAGStringInput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DAGStringInput\" />\n"
    },
    {
      "name": "dagstringoutput_model",
      "x-displayName": "DAGStringOutput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DAGStringOutput\" />\n"
    },
    {
      "name": "dagtask_model",
      "x-displayName": "DAGTask",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DAGTask\" />\n"
    },
    {
      "name": "dagtaskloop_model",
      "x-displayName": "DAGTaskLoop",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DAGTaskLoop\" />\n"
    },
    {
      "name": "dependency_model",
      "x-displayName": "Dependency",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Dependency\" />\n"
    },
    {
      "name": "dependencytype_model",
      "x-displayName": "DependencyType",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/DependencyType\" />\n"
    },
    {
      "name": "filereference_model",
      "x-displayName": "FileReference",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/FileReference\" />\n"
    },
    {
      "name": "folderreference_model",
      "x-displayName": "FolderReference",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/FolderReference\" />\n"
    },
    {
      "name": "fromoutput_model",
      "x-displayName": "FromOutput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/FromOutput\" />\n"
    },
    {
      "name": "genericinput_model",
      "x-displayName": "GenericInput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/GenericInput\" />\n"
    },
    {
      "name": "genericoutput_model",
      "x-displayName": "GenericOutput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/GenericOutput\" />\n"
    },
    {
      "name": "http_model",
      "x-displayName": "HTTP",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/HTTP\" />\n"
    },
    {
      "name": "iobase_model",
      "x-displayName": "IOBase",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/IOBase\" />\n"
    },
    {
      "name": "inputfilereference_model",
      "x-displayName": "InputFileReference",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/InputFileReference\" />\n"
    },
    {
      "name": "inputfolderreference_model",
      "x-displayName": "InputFolderReference",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/InputFolderReference\" />\n"
    },
    {
      "name": "inputpathreference_model",
      "x-displayName": "InputPathReference",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/InputPathReference\" />\n"
    },
    {
      "name": "inputreference_model",
      "x-displayName": "InputReference",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/InputReference\" />\n"
    },
    {
      "name": "itemreference_model",
      "x-displayName": "ItemReference",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/ItemReference\" />\n"
    },
    {
      "name": "itemtype_model",
      "x-displayName": "ItemType",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/ItemType\" />\n"
    },
    {
      "name": "license_model",
      "x-displayName": "License",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/License\" />\n"
    },
    {
      "name": "maintainer_model",
      "x-displayName": "Maintainer",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Maintainer\" />\n"
    },
    {
      "name": "metadata_model",
      "x-displayName": "MetaData",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/MetaData\" />\n"
    },
    {
      "name": "pathoutput_model",
      "x-displayName": "PathOutput",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/PathOutput\" />\n"
    },
    {
      "name": "projectfolder_model",
      "x-displayName": "ProjectFolder",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/ProjectFolder\" />\n"
    },
    {
      "name": "recipe_model",
      "x-displayName": "Recipe",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/Recipe\" />\n"
    },
    {
      "name": "s3_model",
      "x-displayName": "S3",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/S3\" />\n"
    },
    {
      "name": "taskargument_model",
      "x-displayName": "TaskArgument",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/TaskArgument\" />\n"
    },
    {
      "name": "taskfilereference_model",
      "x-displayName": "TaskFileReference",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/TaskFileReference\" />\n"
    },
    {
      "name": "taskfolderreference_model",
      "x-displayName": "TaskFolderReference",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/TaskFolderReference\" />\n"
    },
    {
      "name": "taskpathargument_model",
      "x-displayName": "TaskPathArgument",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/TaskPathArgument\" />\n"
    },
    {
      "name": "taskpathreference_model",
      "x-displayName": "TaskPathReference",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/TaskPathReference\" />\n"
    },
    {
      "name": "taskpathreturn_model",
      "x-displayName": "TaskPathReturn",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/TaskPathReturn\" />\n"
    },
    {
      "name": "taskreference_model",
      "x-displayName": "TaskReference",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/TaskReference\" />\n"
    },
    {
      "name": "taskreturn_model",
      "x-displayName": "TaskReturn",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/TaskReturn\" />\n"
    },
    {
      "name": "valuefilereference_model",
      "x-displayName": "ValueFileReference",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/ValueFileReference\" />\n"
    },
    {
      "name": "valuefolderreference_model",
      "x-displayName": "ValueFolderReference",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/ValueFolderReference\" />\n"
    },
    {
      "name": "valuelistreference_model",
      "x-displayName": "ValueListReference",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/ValueListReference\" />\n"
    },
    {
      "name": "valuereference_model",
      "x-displayName": "ValueReference",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/ValueReference\" />\n"
    },
    {
      "name": "_artifactsource_model",
      "x-displayName": "_ArtifactSource",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/_ArtifactSource\" />\n"
    },
    {
      "name": "_basereference_model",
      "x-displayName": "_BaseReference",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/_BaseReference\" />\n"
    },
    {
      "name": "_inputreferencebase_model",
      "x-displayName": "_InputReferenceBase",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/_InputReferenceBase\" />\n"
    },
    {
      "name": "_openapigenbasemodel_model",
      "x-displayName": "_OpenAPIGenBaseModel",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/_OpenAPIGenBaseModel\" />\n"
    },
    {
      "name": "_taskreferencebase_model",
      "x-displayName": "_TaskReferenceBase",
      "description": "<SchemaDefinition schemaRef=\"#/components/schemas/_TaskReferenceBase\" />\n"
    }
  ],
  "x-tagGroups": [
    {
      "name": "Models",
      "tags": [
        "_artifactsource_model",
        "_basereference_model",
        "_inputreferencebase_model",
        "_openapigenbasemodel_model",
        "_taskreferencebase_model",
        "dag_model",
        "dagarrayinput_model",
        "dagarrayoutput_model",
        "dagbooleaninput_model",
        "dagbooleanoutput_model",
        "dagfileinput_model",
        "dagfileoutput_model",
        "dagfolderinput_model",
        "dagfolderoutput_model",
        "dagintegerinput_model",
        "dagintegeroutput_model",
        "dagnumberinput_model",
        "dagnumberoutput_model",
        "dagobjectinput_model",
        "dagobjectoutput_model",
        "dagpathinput_model",
        "dagpathoutput_model",
        "dagstringinput_model",
        "dagstringoutput_model",
        "dagtask_model",
        "dagtaskloop_model",
        "dependency_model",
        "dependencytype_model",
        "filereference_model",
        "folderreference_model",
        "fromoutput_model",
        "genericinput_model",
        "genericoutput_model",
        "http_model",
        "inputfilereference_model",
        "inputfolderreference_model",
        "inputpathreference_model",
        "inputreference_model",
        "iobase_model",
        "itemreference_model",
        "itemtype_model",
        "license_model",
        "maintainer_model",
        "metadata_model",
        "pathoutput_model",
        "projectfolder_model",
        "recipe_model",
        "s3_model",
        "taskargument_model",
        "taskfilereference_model",
        "taskfolderreference_model",
        "taskpathargument_model",
        "taskpathreference_model",
        "taskpathreturn_model",
        "taskreference_model",
        "taskreturn_model",
        "valuefilereference_model",
        "valuefolderreference_model",
        "valuelistreference_model",
        "valuereference_model"
      ]
    }
  ],
  "paths": {},
  "components": {
    "schemas": {
      "Maintainer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "title": "Name",
                "description": "The name of the author/maintainer person or organization.",
                "type": "string"
              },
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "email": {
                "title": "Email",
                "description": "The email address of the author/maintainer person or organization.",
                "type": "string"
              },
              "type": {
                "title": "Type",
                "default": "Maintainer",
                "type": "string",
                "pattern": "^Maintainer$",
                "readOnly": true
              }
            },
            "required": [
              "name"
            ]
          }
        ],
        "title": "Maintainer",
        "description": "Maintainer information",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "License": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "title": "Name",
                "description": "The license name used for the package.",
                "type": "string"
              },
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "url": {
                "title": "Url",
                "description": "A URL to the license used for the package.",
                "type": "string"
              },
              "type": {
                "title": "Type",
                "default": "License",
                "type": "string",
                "pattern": "^License$",
                "readOnly": true
              }
            },
            "required": [
              "name"
            ]
          }
        ],
        "title": "License",
        "description": "License information for the Package",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "MetaData": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "title": "Name",
                "description": "Package name. Make it descriptive and helpful ;)",
                "type": "string"
              },
              "tag": {
                "title": "Tag",
                "description": "The tag of the package",
                "type": "string"
              },
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "app_version": {
                "title": "App Version",
                "description": "The version of the application code underlying the manifest",
                "type": "string"
              },
              "keywords": {
                "title": "Keywords",
                "description": "A list of keywords to search the package by",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "maintainers": {
                "title": "Maintainers",
                "description": "A list of maintainers for the package",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Maintainer"
                }
              },
              "home": {
                "title": "Home",
                "description": "The URL of this package's home page",
                "type": "string"
              },
              "sources": {
                "title": "Sources",
                "description": "A list of URLs to source code for this project",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "icon": {
                "title": "Icon",
                "description": "A URL to an SVG or PNG image to be used as an icon",
                "type": "string"
              },
              "deprecated": {
                "title": "Deprecated",
                "description": "Whether this package is deprecated",
                "type": "boolean"
              },
              "description": {
                "title": "Description",
                "description": "A description of what this package does",
                "type": "string"
              },
              "license": {
                "title": "License",
                "description": "The license information.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/License"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "MetaData",
                "type": "string",
                "pattern": "^MetaData$",
                "readOnly": true
              }
            },
            "required": [
              "name",
              "tag"
            ]
          }
        ],
        "title": "MetaData",
        "description": "Package metadata information.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DependencyType": {
        "title": "DependencyType",
        "description": "An enumeration.",
        "enum": [
          "recipe",
          "operator"
        ],
        "type": "string"
      },
      "Dependency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "$ref": "#/components/schemas/DependencyType",
                "readOnly": true
              },
              "name": {
                "title": "Name",
                "description": "Workflow name. This name should be unique among all the resources in your resource. Use an alias if this is not the case.",
                "type": "string"
              },
              "tag": {
                "title": "Tag",
                "description": "Tag of the resource.",
                "type": "string"
              },
              "source": {
                "title": "Source",
                "description": "URL to a repository where this resource can be found.",
                "examples": [
                  "https://registry.pollination.cloud/ladybugbot",
                  "https://some-random-user.github.io/registry"
                ],
                "type": "string"
              },
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "hash": {
                "title": "Hash",
                "description": "The digest hash of the dependency when retrieved from its source. This is locked when the resource dependencies are downloaded.",
                "type": "string"
              },
              "alias": {
                "title": "Alias",
                "description": "An optional alias to refer to this dependency. Useful if the name is already used somewhere else.",
                "type": "string"
              }
            },
            "required": [
              "type",
              "name",
              "tag",
              "source"
            ]
          }
        ],
        "title": "Dependency",
        "description": "Configuration to fetch a Recipe or Operator that another Recipe depends on.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DAGStringInput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericInput"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "DAGStringInput",
                "pattern": "^DAGStringInput$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "DAGStringInput",
        "description": "A String input.\n\nYou can add additional validation by defining a JSONSchema specification.\n\nSee http://json-schema.org/understanding-json-schema/reference/string.html#string for\nmore information.\n\n.. code-block:: python\n\n    \"schema\": {\n        \"type\": \"string\",\n        \"maxLength\": 50,\n        \"pattern\": \"(?i)(^.*\\.epw$)\"\n    }",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DAGIntegerInput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "title": "Name",
                "description": "Input name.",
                "type": "string"
              },
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "description": {
                "title": "Description",
                "description": "Optional description for input.",
                "type": "string"
              },
              "default": {
                "title": "Default",
                "description": "Default value to use for an input if a value was not supplied.",
                "type": "integer",
                "format": "int32"
              },
              "spec": {
                "title": "Spec",
                "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.",
                "type": "object"
              },
              "type": {
                "title": "Type",
                "default": "DAGIntegerInput",
                "pattern": "^DAGIntegerInput$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "DAGIntegerInput",
        "description": "An integer input.\n\nYou can add additional validation by defining a JSONSchema specification.\n\nSee http://json-schema.org/understanding-json-schema/reference/numeric.html#numeric\nfor more information.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DAGNumberInput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "title": "Name",
                "description": "Input name.",
                "type": "string"
              },
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "description": {
                "title": "Description",
                "description": "Optional description for input.",
                "type": "string"
              },
              "default": {
                "title": "Default",
                "description": "Default value to use for an input if a value was not supplied.",
                "type": "number",
                "format": "double"
              },
              "spec": {
                "title": "Spec",
                "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.",
                "type": "object"
              },
              "type": {
                "title": "Type",
                "default": "DAGNumberInput",
                "pattern": "^DAGNumberInput$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "DAGNumberInput",
        "description": "A number input.\n\nYou can add additional validation by defining a JSONSchema specification.\n\nSee http://json-schema.org/understanding-json-schema/reference/numeric.html#numeric\nfor more information.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DAGBooleanInput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "title": "Name",
                "description": "Input name.",
                "type": "string"
              },
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "description": {
                "title": "Description",
                "description": "Optional description for input.",
                "type": "string"
              },
              "default": {
                "title": "Default",
                "description": "Default value to use for an input if a value was not supplied.",
                "type": "boolean"
              },
              "spec": {
                "title": "Spec",
                "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.",
                "type": "object"
              },
              "type": {
                "title": "Type",
                "default": "DAGBooleanInput",
                "pattern": "^DAGBooleanInput$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "DAGBooleanInput",
        "description": "The boolean type matches only two special values: True and False.\n\nNote that values that evaluate to true or false, such as 1 and 0, are not accepted.\n\nYou can add additional validation by defining a JSONSchema specification.\n\nSee http://json-schema.org/understanding-json-schema/reference/boolean.html for more\ninformation.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "HTTP": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_ArtifactSource"
          },
          {
            "type": "object",
            "required": [
              "url"
            ],
            "properties": {
              "url": {
                "title": "Url",
                "description": "For a HTTP endpoint this can be http://climate.onebuilding.org.",
                "type": "string"
              },
              "type": {
                "title": "Type",
                "default": "HTTP",
                "pattern": "^HTTP$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "HTTP",
        "description": "HTTP Source\n\nA web HTTP to an FTP server or an API for example.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "S3": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_ArtifactSource"
          },
          {
            "type": "object",
            "required": [
              "key",
              "endpoint",
              "bucket"
            ],
            "properties": {
              "key": {
                "title": "Key",
                "description": "The path inside the bucket to source artifacts from.",
                "type": "string"
              },
              "endpoint": {
                "title": "Endpoint",
                "description": "The HTTP endpoint to reach the S3 bucket.",
                "type": "string"
              },
              "bucket": {
                "title": "Bucket",
                "description": "The name of the S3 bucket on the host server.",
                "type": "string"
              },
              "type": {
                "title": "Type",
                "default": "S3",
                "pattern": "^S3$",
                "type": "string",
                "readOnly": true
              },
              "credentials_path": {
                "title": "Credentials Path",
                "description": "Path to the file holding the AccessKey and SecretAccessKey to authenticate to the bucket. Assumes public bucket access if none are specified.",
                "type": "string"
              }
            }
          }
        ],
        "title": "S3",
        "description": "S3 Source\n\nAn S3 bucket artifact Source.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ProjectFolder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_ArtifactSource"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "ProjectFolder",
                "pattern": "^ProjectFolder$",
                "type": "string",
                "readOnly": true
              },
              "path": {
                "title": "Path",
                "description": "The path to a folder where files and folders can be sourced. For a local filesystem this can be \"C:\\Users\\me\\simulations\\test\".",
                "type": "string"
              }
            }
          }
        ],
        "title": "ProjectFolder",
        "description": "Project Folder Source\n\nThis is the path to a folder where files and folders can be sourced. In the context\nof a desktop run Workflow this folder will correspond to a local folder. In the\ncontext of a workflow run on Pollination this folder will correspond to a Project\nscoped folder.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DAGFolderInput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "title": "Name",
                "description": "Input name.",
                "type": "string"
              },
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "description": {
                "title": "Description",
                "description": "Optional description for input.",
                "type": "string"
              },
              "default": {
                "title": "Default",
                "description": "The default source for file if the value is not provided.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/HTTP"
                  },
                  {
                    "$ref": "#/components/schemas/S3"
                  },
                  {
                    "$ref": "#/components/schemas/ProjectFolder"
                  }
                ]
              },
              "spec": {
                "title": "Spec",
                "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.",
                "type": "object"
              },
              "type": {
                "title": "Type",
                "default": "DAGFolderInput",
                "pattern": "^DAGFolderInput$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "DAGFolderInput",
        "description": "A folder input.\n\nFolder is a special string input. Unlike other string inputs, a folder will be copied\nfrom its location to execution folder when a workflow is executed.\n\nYou can add additional validation by defining a JSONSchema specification.\n\nSee http://json-schema.org/understanding-json-schema/reference/string.html#string for\nmore information.\n\n.. code-block:: python\n\n    \"schema\": {\n        \"type\": \"string\",\n        \"maxLength\": 50,\n    }",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DAGFileInput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "title": "Name",
                "description": "Input name.",
                "type": "string"
              },
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "description": {
                "title": "Description",
                "description": "Optional description for input.",
                "type": "string"
              },
              "default": {
                "title": "Default",
                "description": "The default source for file if the value is not provided.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/HTTP"
                  },
                  {
                    "$ref": "#/components/schemas/S3"
                  },
                  {
                    "$ref": "#/components/schemas/ProjectFolder"
                  }
                ]
              },
              "spec": {
                "title": "Spec",
                "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.",
                "type": "object"
              },
              "extensions": {
                "title": "Extensions",
                "description": "Optional list of extensions for file. The check for extension is case-insensitive.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "title": "Type",
                "default": "DAGFileInput",
                "pattern": "^DAGFileInput$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "DAGFileInput",
        "description": "A file input.\n\nFile is a special string input. Unlike other string inputs, a file will be copied\nfrom its location to execution folder when a workflow is executed.\n\nYou can add additional validation by defining a JSONSchema specification.\n\nSee http://json-schema.org/understanding-json-schema/reference/string.html#string for\nmore information.\n\n.. code-block:: python\n\n    # a file with maximum 50 characters with an ``epw`` extension.\n\n    \"schema\": {\n        \"type\": \"string\",\n        \"maxLength\": 50,\n        \"pattern\": \"(?i)(^.*\\.epw$)\"\n    }",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DAGPathInput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "title": "Name",
                "description": "Input name.",
                "type": "string"
              },
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "description": {
                "title": "Description",
                "description": "Optional description for input.",
                "type": "string"
              },
              "default": {
                "title": "Default",
                "description": "The default source for file if the value is not provided.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/HTTP"
                  },
                  {
                    "$ref": "#/components/schemas/S3"
                  },
                  {
                    "$ref": "#/components/schemas/ProjectFolder"
                  }
                ]
              },
              "spec": {
                "title": "Spec",
                "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.",
                "type": "object"
              },
              "extensions": {
                "title": "Extensions",
                "description": "Optional list of extensions for path. The check for extension is case-insensitive. The extension will only be validated for file inputs.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "type": {
                "title": "Type",
                "default": "DAGPathInput",
                "pattern": "^DAGPathInput$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "DAGPathInput",
        "description": "A file or a folder input.\n\nUse this input only in cases that the input can be either a file or folder. For file\nor folder-only inputs see File and Folder.\n\nPath is a special string input. Unlike other string inputs, a path will be copied\nfrom its location to execution folder when a workflow is executed.\n\nYou can add additional validation by defining a JSONSchema specification.\n\nSee http://json-schema.org/understanding-json-schema/reference/string.html#string for\nmore information.\n\n.. code-block:: python\n\n    # a file with maximum 50 characters with an ``epw`` extension.\n\n    \"schema\": {\n        \"type\": \"string\",\n        \"maxLength\": 50,\n        \"pattern\": \"(?i)(^.*\\.epw$)\"\n    }",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ItemType": {
        "title": "ItemType",
        "description": "Type enum for items in a list.",
        "enum": [
          "String",
          "Integer",
          "Number",
          "Boolean",
          "Folder",
          "Array",
          "Object"
        ],
        "type": "string"
      },
      "DAGArrayInput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "title": "Name",
                "description": "Input name.",
                "type": "string"
              },
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "description": {
                "title": "Description",
                "description": "Optional description for input.",
                "type": "string"
              },
              "default": {
                "title": "Default",
                "description": "Default value to use for an input if a value was not supplied.",
                "type": "array",
                "items": {}
              },
              "spec": {
                "title": "Spec",
                "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.",
                "type": "object"
              },
              "items_type": {
                "$ref": "#/components/schemas/ItemType"
              },
              "type": {
                "title": "Type",
                "default": "DAGArrayInput",
                "pattern": "^DAGArrayInput$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "DAGArrayInput",
        "description": "An array input.\n\nYou can add additional validation by defining a JSONSchema specification.\n\nSee http://json-schema.org/understanding-json-schema/reference/array.html for\nmore information.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DAGObjectInput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "required": [
              "name"
            ],
            "properties": {
              "name": {
                "title": "Name",
                "description": "Input name.",
                "type": "string"
              },
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "description": {
                "title": "Description",
                "description": "Optional description for input.",
                "type": "string"
              },
              "default": {
                "title": "Default",
                "description": "Default value to use for an input if a value was not supplied.",
                "type": "object"
              },
              "spec": {
                "title": "Spec",
                "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.",
                "type": "object"
              },
              "type": {
                "title": "Type",
                "default": "DAGObjectInput",
                "pattern": "^DAGObjectInput$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "DAGObjectInput",
        "description": "A JSON object input.\n\nJSON objects are similar to Python dictionaries.\n\nYou can add additional validation by defining a JSONSchema specification.\n\nSee http://json-schema.org/understanding-json-schema/reference/object.html for\nmore information.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "TaskReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_TaskReferenceBase"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "TaskReference",
                "pattern": "^TaskReference$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "TaskReference",
        "description": "A Task reference for parameters other than files or folders.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "FileReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_BaseReference"
          },
          {
            "type": "object",
            "required": [
              "path"
            ],
            "properties": {
              "path": {
                "title": "Path",
                "description": "Relative path to a file.",
                "type": "string"
              },
              "type": {
                "title": "Type",
                "default": "FileReference",
                "pattern": "^FileReference$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "FileReference",
        "description": "Reference to a file.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DAGStringOutput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericOutput"
          },
          {
            "type": "object",
            "required": [
              "from"
            ],
            "properties": {
              "from": {
                "title": "From",
                "description": "Reference to a file or a task output. Task output must be file.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TaskReference"
                  },
                  {
                    "$ref": "#/components/schemas/FileReference"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DAGStringOutput",
                "pattern": "^DAGStringOutput$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "DAGStringOutput",
        "description": "DAG string output.\n\nThis output loads the content from a file as a string.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DAGIntegerOutput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericOutput"
          },
          {
            "type": "object",
            "required": [
              "from"
            ],
            "properties": {
              "from": {
                "title": "From",
                "description": "Reference to a file or a task output. Task output must be file.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TaskReference"
                  },
                  {
                    "$ref": "#/components/schemas/FileReference"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DAGIntegerOutput",
                "pattern": "^DAGIntegerOutput$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "DAGIntegerOutput",
        "description": "DAG integer output.\n\nThis output loads the content from a file as an integer.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DAGNumberOutput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericOutput"
          },
          {
            "type": "object",
            "required": [
              "from"
            ],
            "properties": {
              "from": {
                "title": "From",
                "description": "Reference to a file or a task output. Task output must be file.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TaskReference"
                  },
                  {
                    "$ref": "#/components/schemas/FileReference"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DAGNumberOutput",
                "pattern": "^DAGNumberOutput$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "DAGNumberOutput",
        "description": "DAG number output.\n\nThis output loads the content from a file as a floating number.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DAGBooleanOutput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericOutput"
          },
          {
            "type": "object",
            "required": [
              "from"
            ],
            "properties": {
              "from": {
                "title": "From",
                "description": "Reference to a file or a task output. Task output must be file.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TaskReference"
                  },
                  {
                    "$ref": "#/components/schemas/FileReference"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DAGBooleanOutput",
                "pattern": "^DAGBooleanOutput$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "DAGBooleanOutput",
        "description": "DAG boolean output.\n\nThis output loads the content from a file as a boolean.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "FolderReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_BaseReference"
          },
          {
            "type": "object",
            "required": [
              "path"
            ],
            "properties": {
              "path": {
                "title": "Path",
                "description": "Relative path to a folder.",
                "type": "string"
              },
              "type": {
                "title": "Type",
                "default": "FolderReference",
                "pattern": "^FolderReference$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "FolderReference",
        "description": "Reference to a folder.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DAGFolderOutput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericOutput"
          },
          {
            "type": "object",
            "required": [
              "from"
            ],
            "properties": {
              "from": {
                "title": "From",
                "description": "Reference to a folder or a task output. Task output must be folder.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TaskReference"
                  },
                  {
                    "$ref": "#/components/schemas/FolderReference"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DAGFolderOutput",
                "pattern": "^DAGFolderOutput$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "DAGFolderOutput",
        "description": "DAG folder output.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DAGFileOutput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericOutput"
          },
          {
            "type": "object",
            "required": [
              "from"
            ],
            "properties": {
              "from": {
                "title": "From",
                "description": "Reference to a file or a task output. Task output must be file.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TaskReference"
                  },
                  {
                    "$ref": "#/components/schemas/FileReference"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DAGFileOutput",
                "pattern": "^DAGFileOutput$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "DAGFileOutput",
        "description": "DAG file output.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DAGPathOutput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericOutput"
          },
          {
            "type": "object",
            "required": [
              "from"
            ],
            "properties": {
              "from": {
                "title": "From",
                "description": "Reference to a file, folder or a task output. Task output must either be a file or a folder.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TaskReference"
                  },
                  {
                    "$ref": "#/components/schemas/FileReference"
                  },
                  {
                    "$ref": "#/components/schemas/FolderReference"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DAGPathOutput",
                "pattern": "^DAGPathOutput$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "DAGPathOutput",
        "description": "DAG path output.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DAGArrayOutput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericOutput"
          },
          {
            "type": "object",
            "required": [
              "from"
            ],
            "properties": {
              "from": {
                "title": "From",
                "description": "Reference to a file or a task output. Task output must be file.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TaskReference"
                  },
                  {
                    "$ref": "#/components/schemas/FileReference"
                  }
                ]
              },
              "items_type": {
                "$ref": "#/components/schemas/ItemType"
              },
              "type": {
                "title": "Type",
                "default": "DAGArrayOutput",
                "pattern": "^DAGArrayOutput$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "DAGArrayOutput",
        "description": "DAG array output.\n\nThis output loads the content from a JSON file which must be a JSON Array.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DAGObjectOutput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericOutput"
          },
          {
            "type": "object",
            "required": [
              "from"
            ],
            "properties": {
              "from": {
                "title": "From",
                "description": "Reference to a file or a task output. Task output must be file.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/TaskReference"
                  },
                  {
                    "$ref": "#/components/schemas/FileReference"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DAGObjectOutput",
                "pattern": "^DAGObjectOutput$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "DAGObjectOutput",
        "description": "DAG object output.\n\nThis output loads the content from a file as a JSON object.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "InputReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_InputReferenceBase"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "InputReference",
                "pattern": "^InputReference$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "InputReference",
        "description": "An input parameter reference which is not a file or a folder.\n\nFor a file or a folder use InputFileReference, InputFolderReference or\nInputPathReference instead.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ItemReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_BaseReference"
          },
          {
            "type": "object",
            "properties": {
              "variable": {
                "title": "Variable",
                "description": "The name of the looped item variable (use dot notation for nested json values)",
                "type": "string"
              },
              "type": {
                "title": "Type",
                "default": "ItemReference",
                "pattern": "^ItemReference$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "ItemReference",
        "description": "An Item Reference.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ValueReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_BaseReference"
          },
          {
            "type": "object",
            "required": [
              "value"
            ],
            "properties": {
              "value": {
                "title": "Value",
                "description": "A fixed value for this reference."
              },
              "type": {
                "title": "Type",
                "default": "ValueReference",
                "pattern": "^ValueReference$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "ValueReference",
        "description": "A reference to a fixed value.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "TaskArgument": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "title": "Name",
                "description": "Argument name. The name must match one of the input names from Task's template which can be a function or DAG.",
                "type": "string"
              },
              "from": {
                "title": "From",
                "description": "A reference to a DAG input, a DAG output or another task output. You can also use the ValueReference type to hard-code an input value.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/InputReference"
                  },
                  {
                    "$ref": "#/components/schemas/TaskReference"
                  },
                  {
                    "$ref": "#/components/schemas/ItemReference"
                  },
                  {
                    "$ref": "#/components/schemas/ValueReference"
                  }
                ]
              },
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "type": {
                "title": "Type",
                "default": "TaskArgument",
                "pattern": "^TaskArgument$",
                "type": "string",
                "readOnly": true
              }
            },
            "required": [
              "name",
              "from"
            ]
          }
        ],
        "title": "TaskArgument",
        "description": "Task argument for receiving inputs that are not files or folders.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "InputFileReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_InputReferenceBase"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "InputFileReference",
                "pattern": "^InputFileReference$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "InputFileReference",
        "description": "An input file reference",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "InputFolderReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_InputReferenceBase"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "InputFolderReference",
                "pattern": "^InputFolderReference$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "InputFolderReference",
        "description": "An input folder reference",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "InputPathReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_InputReferenceBase"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "InputPathReference",
                "pattern": "^InputPathReference$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "InputPathReference",
        "description": "An input file or folder reference",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "TaskFileReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_TaskReferenceBase"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "TaskFileReference",
                "pattern": "^TaskFileReference$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "TaskFileReference",
        "description": "A reference to a file that is generated in a task.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "TaskFolderReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_TaskReferenceBase"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "TaskFolderReference",
                "pattern": "^TaskFolderReference$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "TaskFolderReference",
        "description": "A reference to a folder that is generated in a task.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "TaskPathReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_TaskReferenceBase"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "TaskPathReference",
                "pattern": "^TaskPathReference$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "TaskPathReference",
        "description": "A reference to a file or folder that is generated in a task.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ValueFileReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_BaseReference"
          },
          {
            "type": "object",
            "required": [
              "path"
            ],
            "properties": {
              "path": {
                "title": "Path",
                "description": "A fixed value for this reference.",
                "type": "string"
              },
              "type": {
                "title": "Type",
                "default": "ValueFileReference",
                "pattern": "^ValueFileReference$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "ValueFileReference",
        "description": "A reference to a fixed file.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ValueFolderReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ValueFileReference"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "ValueFolderReference",
                "pattern": "^ValueFolderReference$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "ValueFolderReference",
        "description": "A reference to a fixed folder.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "TaskPathArgument": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "title": "Name",
                "description": "Argument name. The name must match one of the input names from Task's template which can be a function or DAG.",
                "type": "string"
              },
              "from": {
                "title": "From",
                "description": "A reference to a DAG input, a DAG output or another task output. You can also use the ValueReference type to hard-code an input value.",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/InputFileReference"
                  },
                  {
                    "$ref": "#/components/schemas/InputFolderReference"
                  },
                  {
                    "$ref": "#/components/schemas/InputPathReference"
                  },
                  {
                    "$ref": "#/components/schemas/TaskFileReference"
                  },
                  {
                    "$ref": "#/components/schemas/TaskFolderReference"
                  },
                  {
                    "$ref": "#/components/schemas/TaskPathReference"
                  },
                  {
                    "$ref": "#/components/schemas/ValueFileReference"
                  },
                  {
                    "$ref": "#/components/schemas/ValueFolderReference"
                  }
                ]
              },
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "type": {
                "title": "Type",
                "default": "TaskPathArgument",
                "pattern": "^TaskPathArgument$",
                "type": "string",
                "readOnly": true
              },
              "sub_path": {
                "title": "Sub Path",
                "description": "A sub_path inside the path that is provided in the ``from`` field. Use sub_path to only access part of the Path that is needed instead of copying all the files and folders inside the path.",
                "type": "string"
              }
            },
            "required": [
              "name",
              "from"
            ]
          }
        ],
        "title": "TaskPathArgument",
        "description": "BaseModel with functionality to return the object as a yaml string\n\n    ",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "ValueListReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_BaseReference"
          },
          {
            "type": "object",
            "required": [
              "value"
            ],
            "properties": {
              "value": {
                "title": "Value",
                "description": "A fixed value for this reference.",
                "type": "array",
                "items": {}
              },
              "type": {
                "title": "Type",
                "default": "ValueListReference",
                "pattern": "^ValueListReference$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "ValueListReference",
        "description": "A reference to a fixed value.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DAGTaskLoop": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "from": {
                "title": "From",
                "description": "The task or DAG parameter to loop over (must be iterable).",
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/InputReference"
                  },
                  {
                    "$ref": "#/components/schemas/TaskReference"
                  },
                  {
                    "$ref": "#/components/schemas/ValueListReference"
                  }
                ]
              },
              "type": {
                "title": "Type",
                "default": "DAGTaskLoop",
                "type": "string",
                "pattern": "^DAGTaskLoop$",
                "readOnly": true
              }
            }
          }
        ],
        "title": "DAGTaskLoop",
        "description": "Loop configuration for the task.\n\nThis will run the template provided multiple times and in parallel relative to an\ninput or task parameter which should be a list.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "TaskReturn": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericOutput"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "TaskReturn",
                "pattern": "^TaskReturn$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "TaskReturn",
        "description": "A Task return output that exposes the values from a function or a DAG.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "TaskPathReturn": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PathOutput"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "title": "Type",
                "default": "TaskPathReturn",
                "pattern": "^TaskPathReturn$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "TaskPathReturn",
        "description": "A Task output that returns a file or a folder output from a function or a DAG.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DAGTask": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "title": "Name",
                "description": "Name for this task. It must be unique in a DAG.",
                "type": "string"
              },
              "template": {
                "title": "Template",
                "description": "Template name. A template is a Function or a DAG. This template must be available in the dependencies.",
                "type": "string"
              },
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "arguments": {
                "title": "Arguments",
                "description": "The input arguments for this task.",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/TaskArgument"
                    },
                    {
                      "$ref": "#/components/schemas/TaskPathArgument"
                    }
                  ]
                }
              },
              "needs": {
                "title": "Needs",
                "description": "List of DAG tasks that this task depends on and needs to be executed before this task.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "loop": {
                "title": "Loop",
                "description": "Loop configuration for this task.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DAGTaskLoop"
                  }
                ]
              },
              "sub_folder": {
                "title": "Sub Folder",
                "description": "A path relative to the current folder context where artifacts should be saved. This is useful when performing a loop or invoking another workflow and wanting to save results in a specific sub_folder.",
                "type": "string"
              },
              "returns": {
                "title": "Returns",
                "description": "List of task returns.",
                "type": "array",
                "items": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/TaskReturn"
                    },
                    {
                      "$ref": "#/components/schemas/TaskPathReturn"
                    }
                  ]
                }
              },
              "type": {
                "title": "Type",
                "default": "DAGTask",
                "type": "string",
                "pattern": "^DAGTask$",
                "readOnly": true
              }
            },
            "required": [
              "name",
              "template"
            ]
          }
        ],
        "title": "DAGTask",
        "description": "A single task in a DAG flow.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "DAG": {
        "allOf": [
          {
            "$ref": "#/components/schemas/IOBase"
          },
          {
            "type": "object",
            "required": [
              "name",
              "tasks"
            ],
            "properties": {
              "name": {
                "title": "Name",
                "description": "A unique name for this dag.",
                "type": "string"
              },
              "tasks": {
                "title": "Tasks",
                "description": "Tasks are a list of DAG steps",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DAGTask"
                }
              },
              "fail_fast": {
                "title": "Fail Fast",
                "description": "Stop scheduling new steps, as soon as it detects that one of the DAG nodes is failed. Default is True.",
                "default": true,
                "type": "boolean"
              },
              "type": {
                "title": "Type",
                "default": "DAG",
                "type": "string",
                "pattern": "^DAG$",
                "readOnly": true
              }
            }
          }
        ],
        "title": "DAG",
        "description": "A Directed Acyclic Graph containing a list of tasks.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Recipe": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "flow": {
                "title": "Flow",
                "description": "A list of tasks to create a DAG recipe.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/DAG"
                }
              },
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "metadata": {
                "title": "Metadata",
                "description": "Recipe metadata information.",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/MetaData"
                  }
                ]
              },
              "dependencies": {
                "title": "Dependencies",
                "description": "A list of operators and other recipes this recipe depends on.",
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Dependency"
                }
              },
              "type": {
                "title": "Type",
                "default": "Recipe",
                "type": "string",
                "pattern": "^Recipe$",
                "readOnly": true
              }
            },
            "required": [
              "flow"
            ]
          }
        ],
        "title": "Recipe",
        "description": "A Queenbee Recipe",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "_BaseReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "type": {
                "title": "Type",
                "default": "_BaseReference",
                "pattern": "^_BaseReference$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "_BaseReference",
        "description": "A Base reference model.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "_InputReferenceBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_BaseReference"
          },
          {
            "type": "object",
            "required": [
              "variable"
            ],
            "properties": {
              "variable": {
                "title": "Variable",
                "description": "The name of the DAG input variable",
                "type": "string"
              },
              "type": {
                "title": "Type",
                "default": "_InputReferenceBase",
                "pattern": "^_InputReferenceBase$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "_InputReferenceBase",
        "description": "An input reference.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "_TaskReferenceBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_BaseReference"
          },
          {
            "type": "object",
            "required": [
              "name",
              "variable"
            ],
            "properties": {
              "name": {
                "title": "Name",
                "description": "The name of the task to pull output data from.",
                "type": "string"
              },
              "variable": {
                "title": "Variable",
                "description": "The name of the variable.",
                "type": "string"
              },
              "type": {
                "title": "Type",
                "default": "_TaskReferenceBase",
                "pattern": "^_TaskReferenceBase$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "_TaskReferenceBase",
        "description": "A Task Reference",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "PathOutput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericOutput"
          },
          {
            "type": "object",
            "required": [
              "path"
            ],
            "properties": {
              "path": {
                "title": "Path",
                "description": "Path to the output artifact relative to where the function command is executed.",
                "type": "string"
              },
              "type": {
                "title": "Type",
                "default": "PathOutput",
                "pattern": "^PathOutput$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "PathOutput",
        "description": "Base class for output classes that source tha output from a path.\n\nAn example of using PathOutput is TaskFile and TaskFolder outputs.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "GenericOutput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "title": "Name",
                "description": "Output name.",
                "type": "string"
              },
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "type": {
                "title": "Type",
                "default": "GenericOutput",
                "pattern": "^GenericOutput$",
                "type": "string",
                "readOnly": true
              },
              "description": {
                "title": "Description",
                "description": "Optional description for output.",
                "type": "string"
              }
            },
            "required": [
              "name"
            ]
          }
        ],
        "title": "GenericOutput",
        "description": "Base class for all output types.\n\nThe baseclass uses a name to source the output.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "IOBase": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "inputs": {
                "title": "Inputs",
                "description": "Place-holder. Overwrite this!",
                "type": "array",
                "items": {}
              },
              "outputs": {
                "title": "Outputs",
                "description": "Place-holder. Overwrite this!",
                "type": "array",
                "items": {}
              },
              "type": {
                "title": "Type",
                "default": "IOBase",
                "type": "string",
                "pattern": "^IOBase$",
                "readOnly": true
              }
            }
          }
        ],
        "title": "IOBase",
        "description": "A reusable model for classes with Input and Output (IO) objects.\n\nIOBase is the baseclass for Function, DAG and Workflow.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "FromOutput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/GenericOutput"
          },
          {
            "type": "object",
            "required": [
              "from"
            ],
            "properties": {
              "from": {
                "title": "From",
                "description": "Reference to a file or a task output. Task output must be file."
              },
              "type": {
                "title": "Type",
                "default": "FromOutput",
                "pattern": "^FromOutput$",
                "type": "string",
                "readOnly": true
              }
            }
          }
        ],
        "title": "FromOutput",
        "description": "Base class for output classes that source ``from`` an object.\n\nSee DAG output classes for more examples.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "GenericInput": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "title": "Name",
                "description": "Input name.",
                "type": "string"
              },
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "type": {
                "title": "Type",
                "default": "GenericInput",
                "pattern": "^GenericInput$",
                "type": "string",
                "readOnly": true
              },
              "description": {
                "title": "Description",
                "description": "Optional description for input.",
                "type": "string"
              },
              "default": {
                "title": "Default",
                "description": "Place-holder. Overwrite this!",
                "type": "string"
              },
              "spec": {
                "title": "Spec",
                "description": "An optional JSON Schema specification to validate the input value. You can use validate_spec method to validate a value against the spec.",
                "type": "object"
              }
            },
            "required": [
              "name"
            ]
          }
        ],
        "title": "GenericInput",
        "description": "Base class for all input types.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "_ArtifactSource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_OpenAPIGenBaseModel"
          },
          {
            "type": "object",
            "properties": {
              "annotations": {
                "title": "Annotations",
                "description": "An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries.",
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              },
              "type": {
                "title": "Type",
                "default": "_ArtifactSource",
                "type": "string",
                "pattern": "^_ArtifactSource$",
                "readOnly": true
              }
            }
          }
        ],
        "title": "_ArtifactSource",
        "description": "ArtifactSource.\n\nAn Artifact Source System.",
        "discriminator": {
          "propertyName": "type"
        }
      },
      "_OpenAPIGenBaseModel": {
        "title": "_OpenAPIGenBaseModel",
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "description": "A base class to use when there is no baseclass available to fall on.",
            "default": "InvalidType",
            "type": "string",
            "readOnly": true
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      }
    }
  }
}