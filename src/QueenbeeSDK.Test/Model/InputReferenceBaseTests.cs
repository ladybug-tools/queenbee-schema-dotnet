/* 
 * Queenbee Recipe Schema
 *
 * Documentation for Queenbee recipe schema.
 *
 * The version of the OpenAPI document: 1.6.6
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using QueenbeeSDK.Api;
using QueenbeeSDK.Model;
using QueenbeeSDK.Client;
using QueenbeeSDK;

using System.Reflection;
using Newtonsoft.Json;

namespace QueenbeeSDK.Test
{
    /// <summary>
    ///  Class for testing InputReferenceBase
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class InputReferenceBaseTests
    {
        // TODO uncomment below to declare an instance variable for InputReferenceBase
        //private InputReferenceBase instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of InputReferenceBase
            //instance = new InputReferenceBase();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of InputReferenceBase
        /// </summary>
        [Test]
        public void InputReferenceBaseInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOf" InputReferenceBase
            //Assert.IsInstanceOf(typeof(InputReferenceBase), instance);
        }

        /// <summary>
        /// Test deserialize a InputFileReference from type InputReferenceBase
        /// </summary>
        [Test]
        public void InputFileReferenceDeserializeFromInputReferenceBaseTest()
        {
            // TODO uncomment below to test deserialize a InputFileReference from type InputReferenceBase
            //Assert.IsInstanceOf(typeof(InputReferenceBase), JsonConvert.DeserializeObject<InputReferenceBase>(new InputFileReference().ToJson()));
        }
        /// <summary>
        /// Test deserialize a InputPathReference from type InputReferenceBase
        /// </summary>
        [Test]
        public void InputPathReferenceDeserializeFromInputReferenceBaseTest()
        {
            // TODO uncomment below to test deserialize a InputPathReference from type InputReferenceBase
            //Assert.IsInstanceOf(typeof(InputReferenceBase), JsonConvert.DeserializeObject<InputReferenceBase>(new InputPathReference().ToJson()));
        }
        /// <summary>
        /// Test deserialize a InputFolderReference from type InputReferenceBase
        /// </summary>
        [Test]
        public void InputFolderReferenceDeserializeFromInputReferenceBaseTest()
        {
            // TODO uncomment below to test deserialize a InputFolderReference from type InputReferenceBase
            //Assert.IsInstanceOf(typeof(InputReferenceBase), JsonConvert.DeserializeObject<InputReferenceBase>(new InputFolderReference().ToJson()));
        }
        /// <summary>
        /// Test deserialize a InputReference from type InputReferenceBase
        /// </summary>
        [Test]
        public void InputReferenceDeserializeFromInputReferenceBaseTest()
        {
            // TODO uncomment below to test deserialize a InputReference from type InputReferenceBase
            //Assert.IsInstanceOf(typeof(InputReferenceBase), JsonConvert.DeserializeObject<InputReferenceBase>(new InputReference().ToJson()));
        }

        /// <summary>
        /// Test the property 'Variable'
        /// </summary>
        [Test]
        public void VariableTest()
        {
            // TODO unit test for the property 'Variable'
        }
        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Test]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }

    }

}
