/* 
 * Queenbee Recipe Schema
 *
 * Documentation for Queenbee recipe schema.
 *
 * The version of the OpenAPI document: 1.6.6
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using NUnit.Framework;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using QueenbeeSDK.Api;
using QueenbeeSDK.Model;
using QueenbeeSDK.Client;
using QueenbeeSDK;

using System.Reflection;
using Newtonsoft.Json;

namespace QueenbeeSDK.Test
{
    /// <summary>
    ///  Class for testing TaskReference
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class TaskReferenceTests
    {
        // TODO uncomment below to declare an instance variable for TaskReference
        //private TaskReference instance;

        /// <summary>
        /// Setup before each test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // TODO uncomment below to create an instance of TaskReference
            //instance = new TaskReference();
        }

        /// <summary>
        /// Clean up after each test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TaskReference
        /// </summary>
        [Test]
        public void TaskReferenceInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOf" TaskReference
            //Assert.IsInstanceOf(typeof(TaskReference), instance);
        }

        /// <summary>
        /// Test deserialize a TaskFileReference from type TaskReference
        /// </summary>
        [Test]
        public void TaskFileReferenceDeserializeFromTaskReferenceTest()
        {
            // TODO uncomment below to test deserialize a TaskFileReference from type TaskReference
            //Assert.IsInstanceOf(typeof(TaskReference), JsonConvert.DeserializeObject<TaskReference>(new TaskFileReference().ToJson()));
        }
        /// <summary>
        /// Test deserialize a TaskPathReference from type TaskReference
        /// </summary>
        [Test]
        public void TaskPathReferenceDeserializeFromTaskReferenceTest()
        {
            // TODO uncomment below to test deserialize a TaskPathReference from type TaskReference
            //Assert.IsInstanceOf(typeof(TaskReference), JsonConvert.DeserializeObject<TaskReference>(new TaskPathReference().ToJson()));
        }
        /// <summary>
        /// Test deserialize a TaskFolderReference from type TaskReference
        /// </summary>
        [Test]
        public void TaskFolderReferenceDeserializeFromTaskReferenceTest()
        {
            // TODO uncomment below to test deserialize a TaskFolderReference from type TaskReference
            //Assert.IsInstanceOf(typeof(TaskReference), JsonConvert.DeserializeObject<TaskReference>(new TaskFolderReference().ToJson()));
        }

        /// <summary>
        /// Test the property 'Name'
        /// </summary>
        [Test]
        public void NameTest()
        {
            // TODO unit test for the property 'Name'
        }
        /// <summary>
        /// Test the property 'Variable'
        /// </summary>
        [Test]
        public void VariableTest()
        {
            // TODO unit test for the property 'Variable'
        }
        /// <summary>
        /// Test the property 'Type'
        /// </summary>
        [Test]
        public void TypeTest()
        {
            // TODO unit test for the property 'Type'
        }

    }

}
