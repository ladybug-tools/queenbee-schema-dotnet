/* 
 * Queenbee Queenbee Schema
 *
 * Documentation for Queenbee queenbee schema.
 *
 * Contact: info@ladybug.tools
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;


namespace QueenbeeSDK
{
    /// <summary>
    /// The Status of a Workflow Task
    /// </summary>
    [DataContract(Name = "TaskStatus")]
    public partial class TaskStatus : BaseStatus, IEquatable<TaskStatus>, IValidatableObject
    {
        /// <summary>
        /// The type of task this status is for. Can be \&quot;Function\&quot;, \&quot;DAG\&quot; or \&quot;Loop\&quot;
        /// </summary>
        /// <value>The type of task this status is for. Can be \&quot;Function\&quot;, \&quot;DAG\&quot; or \&quot;Loop\&quot;</value>
        [DataMember(Name="status_type", EmitDefaultValue=false)]
        public StatusType StatusType { get; set; }   
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TaskStatus() 
        { 
            // Set non-required readonly properties with defaultValue
            this.Type = "TaskStatus";
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskStatus" /> class.
        /// </summary>
        /// <param name="id">The task unique ID (required).</param>
        /// <param name="name">A human readable name for the task. Usually defined by the DAG task name but can be extended if the task is part of a loop for example. This name is unique within the boundary of the DAG/Workflow that generated it. (required).</param>
        /// <param name="statusType">The type of task this status is for. Can be \&quot;Function\&quot;, \&quot;DAG\&quot; or \&quot;Loop\&quot; (required).</param>
        /// <param name="templateRef">The name of the template that spawned this task (required).</param>
        /// <param name="inputs">The inputs used by this task (required).</param>
        /// <param name="outputs">The outputs produced by this task (required).</param>
        /// <param name="children">A list of child task IDs (required).</param>
        /// <param name="outboundTasks">A list of the last tasks to ran in the context of this task. In the case of a DAG or a workflow this will be the last task that has been executed. It will remain empty for functions. (required).</param>
        /// <param name="command">The command used to run this task. Only applies to Function tasks..</param>
        /// <param name="boundaryId">This indicates the task ID of the associated template root             task in which this task belongs to. A DAG task will have the id of the             parent DAG for example..</param>
        /// <param name="status">The status of this task. Can be \&quot;Running\&quot;, \&quot;Succeeded\&quot;, \&quot;Failed\&quot; or \&quot;Error\&quot; (required).</param>
        /// <param name="startedAt">The time at which the task was started (required).</param>
        /// <param name="annotations">An optional dictionary to add annotations to inputs. These annotations will be used by the client side libraries..</param>
        /// <param name="message">Any message produced by the task. Usually error/debugging hints..</param>
        /// <param name="finishedAt">The time at which the task was completed.</param>
        public TaskStatus
        (
            string status, DateTime startedAt, string id, string name, StatusType statusType, string templateRef, AnyOf<TaskArgument,TaskPathArgument> inputs, AnyOf<TaskReturn,TaskPathReturn> outputs, List<string> children, List<string> outboundTasks, // Required parameters
            Dictionary<string, string> annotations= default, string message= default, DateTime finishedAt= default, string command= default, string boundaryId= default // Optional parameters
        ) : base(status: status, startedAt: startedAt, annotations: annotations, message: message, finishedAt: finishedAt)// BaseClass
        {
            // to ensure "id" is required (not null)
            this.Id = id ?? throw new ArgumentNullException("id is a required property for TaskStatus and cannot be null");
            // to ensure "name" is required (not null)
            this.Name = name ?? throw new ArgumentNullException("name is a required property for TaskStatus and cannot be null");
            this.StatusType = statusType;
            // to ensure "templateRef" is required (not null)
            this.TemplateRef = templateRef ?? throw new ArgumentNullException("templateRef is a required property for TaskStatus and cannot be null");
            // to ensure "inputs" is required (not null)
            this.Inputs = inputs ?? throw new ArgumentNullException("inputs is a required property for TaskStatus and cannot be null");
            // to ensure "outputs" is required (not null)
            this.Outputs = outputs ?? throw new ArgumentNullException("outputs is a required property for TaskStatus and cannot be null");
            // to ensure "children" is required (not null)
            this.Children = children ?? throw new ArgumentNullException("children is a required property for TaskStatus and cannot be null");
            // to ensure "outboundTasks" is required (not null)
            this.OutboundTasks = outboundTasks ?? throw new ArgumentNullException("outboundTasks is a required property for TaskStatus and cannot be null");
            this.Command = command;
            this.BoundaryId = boundaryId;

            // Set non-required readonly properties with defaultValue
            this.Type = "TaskStatus";
        }

        /// <summary>
        /// The task unique ID
        /// </summary>
        /// <value>The task unique ID</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = false)]
        public string Id { get; set; } 
        /// <summary>
        /// A human readable name for the task. Usually defined by the DAG task name but can be extended if the task is part of a loop for example. This name is unique within the boundary of the DAG/Workflow that generated it.
        /// </summary>
        /// <value>A human readable name for the task. Usually defined by the DAG task name but can be extended if the task is part of a loop for example. This name is unique within the boundary of the DAG/Workflow that generated it.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = false)]
        public string Name { get; set; } 
        /// <summary>
        /// The name of the template that spawned this task
        /// </summary>
        /// <value>The name of the template that spawned this task</value>
        [DataMember(Name = "template_ref", IsRequired = true, EmitDefaultValue = false)]
        public string TemplateRef { get; set; } 
        /// <summary>
        /// The inputs used by this task
        /// </summary>
        /// <value>The inputs used by this task</value>
        [DataMember(Name = "inputs", IsRequired = true, EmitDefaultValue = false)]
        public AnyOf<TaskArgument,TaskPathArgument> Inputs { get; set; } 
        /// <summary>
        /// The outputs produced by this task
        /// </summary>
        /// <value>The outputs produced by this task</value>
        [DataMember(Name = "outputs", IsRequired = true, EmitDefaultValue = false)]
        public AnyOf<TaskReturn,TaskPathReturn> Outputs { get; set; } 
        /// <summary>
        /// A list of child task IDs
        /// </summary>
        /// <value>A list of child task IDs</value>
        [DataMember(Name = "children", IsRequired = true, EmitDefaultValue = false)]
        public List<string> Children { get; set; } 
        /// <summary>
        /// A list of the last tasks to ran in the context of this task. In the case of a DAG or a workflow this will be the last task that has been executed. It will remain empty for functions.
        /// </summary>
        /// <value>A list of the last tasks to ran in the context of this task. In the case of a DAG or a workflow this will be the last task that has been executed. It will remain empty for functions.</value>
        [DataMember(Name = "outbound_tasks", IsRequired = true, EmitDefaultValue = false)]
        public List<string> OutboundTasks { get; set; } 
        /// <summary>
        /// The command used to run this task. Only applies to Function tasks.
        /// </summary>
        /// <value>The command used to run this task. Only applies to Function tasks.</value>
        [DataMember(Name = "command", EmitDefaultValue = false)]
        public string Command { get; set; } 
        /// <summary>
        /// This indicates the task ID of the associated template root             task in which this task belongs to. A DAG task will have the id of the             parent DAG for example.
        /// </summary>
        /// <value>This indicates the task ID of the associated template root             task in which this task belongs to. A DAG task will have the id of the             parent DAG for example.</value>
        [DataMember(Name = "boundary_id", EmitDefaultValue = false)]
        public string BoundaryId { get; set; } 

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            return "TaskStatus";
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString(bool detailed)
        {
            if (!detailed)
                return this.ToString();
            
            var sb = new StringBuilder();
            sb.Append("TaskStatus:\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  Annotations: ").Append(Annotations).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StatusType: ").Append(StatusType).Append("\n");
            sb.Append("  TemplateRef: ").Append(TemplateRef).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  Outputs: ").Append(Outputs).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("  OutboundTasks: ").Append(OutboundTasks).Append("\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("  BoundaryId: ").Append(BoundaryId).Append("\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the object from JSON string
        /// </summary>
        /// <returns>TaskStatus object</returns>
        public static TaskStatus FromJson(string json)
        {
            var obj = JsonConvert.DeserializeObject<TaskStatus>(json, JsonSetting.AnyOfConvertSetting);
            if (obj == null)
                return null;
            return obj.Type.ToLower() == obj.GetType().Name.ToLower() ? obj : null;
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>TaskStatus object</returns>
        public virtual TaskStatus DuplicateTaskStatus()
        {
            return FromJson(this.ToJson());
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override OpenAPIGenBaseModel Duplicate()
        {
            return DuplicateTaskStatus();
        }

        /// <summary>
        /// Creates a new instance with the same properties.
        /// </summary>
        /// <returns>OpenAPIGenBaseModel</returns>
        public override BaseStatus DuplicateBaseStatus()
        {
            return DuplicateTaskStatus();
        }
     
        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TaskStatus);
        }

        /// <summary>
        /// Returns true if TaskStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of TaskStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskStatus input)
        {
            if (input == null)
                return false;
            return base.Equals(input) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && base.Equals(input) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && base.Equals(input) && 
                (
                    this.StatusType == input.StatusType ||
                    (this.StatusType != null &&
                    this.StatusType.Equals(input.StatusType))
                ) && base.Equals(input) && 
                (
                    this.TemplateRef == input.TemplateRef ||
                    (this.TemplateRef != null &&
                    this.TemplateRef.Equals(input.TemplateRef))
                ) && base.Equals(input) && 
                (
                    this.Inputs == input.Inputs ||
                    (this.Inputs != null &&
                    this.Inputs.Equals(input.Inputs))
                ) && base.Equals(input) && 
                (
                    this.Outputs == input.Outputs ||
                    (this.Outputs != null &&
                    this.Outputs.Equals(input.Outputs))
                ) && base.Equals(input) && 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    input.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                ) && base.Equals(input) && 
                (
                    this.OutboundTasks == input.OutboundTasks ||
                    this.OutboundTasks != null &&
                    input.OutboundTasks != null &&
                    this.OutboundTasks.SequenceEqual(input.OutboundTasks)
                ) && base.Equals(input) && 
                (
                    this.Command == input.Command ||
                    (this.Command != null &&
                    this.Command.Equals(input.Command))
                ) && base.Equals(input) && 
                (
                    this.BoundaryId == input.BoundaryId ||
                    (this.BoundaryId != null &&
                    this.BoundaryId.Equals(input.BoundaryId))
                ) && base.Equals(input) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.StatusType != null)
                    hashCode = hashCode * 59 + this.StatusType.GetHashCode();
                if (this.TemplateRef != null)
                    hashCode = hashCode * 59 + this.TemplateRef.GetHashCode();
                if (this.Inputs != null)
                    hashCode = hashCode * 59 + this.Inputs.GetHashCode();
                if (this.Outputs != null)
                    hashCode = hashCode * 59 + this.Outputs.GetHashCode();
                if (this.Children != null)
                    hashCode = hashCode * 59 + this.Children.GetHashCode();
                if (this.OutboundTasks != null)
                    hashCode = hashCode * 59 + this.OutboundTasks.GetHashCode();
                if (this.Command != null)
                    hashCode = hashCode * 59 + this.Command.GetHashCode();
                if (this.BoundaryId != null)
                    hashCode = hashCode * 59 + this.BoundaryId.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            foreach(var x in base.BaseValidate(validationContext)) yield return x;

            
            // Type (string) pattern
            Regex regexType = new Regex(@"^TaskStatus$", RegexOptions.CultureInvariant);
            if (false == regexType.Match(this.Type).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Type, must match a pattern of " + regexType, new [] { "Type" });
            }

            yield break;
        }
    }
}
